parameters:
  - name: BaseName
    type: string
  - name: serviceConnection
    type: string
  - name: sharedEnvironmentId
    type: string
  - name: environmentName
    type: string
jobs:
  - job: DeployfindproviderapiInfrastructure
    pool:
      name: 'Azure Pipelines'
      vmImage: 'windows-2019'
    variables:
      SharedASPName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedASPName'] ]
      SharedKeyVaultName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedKeyVaultName'] ]
      SharedSQLServerName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedSQLServerName'] ]
      ConfigurationStorageConnectionString: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.configStorageConnectionString'] ]
      SharedResourceGroup: $[stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.SharedVariables.SharedResourceGroup']]
      ConfigStorageAccountName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.ConfigStorageAccountName'] ]
      EntraReaderUserIdentityResourceId: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.EntraReaderUserIdentityResourceId'] ]
      SqlUserIdentityResourceId: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.SqlUserIdentityResourceId'] ]

    steps:
      - checkout: self
      - checkout: devopsTools
      - pwsh: |
          'Write-Host "SharedResourceGroup variable: $(SharedResourceGroup)"'
          'Write-Host "SharedASPName variable: $(SharedASPName)"'
          'Write-Host "SharedKeyVaultName variable: $(SharedKeyVaultName)"'
          'Write-Host "SharedSQLServerName variable: $(SharedSQLServerName)"'
          'Write-Host "ConfigurationStorageConnectionString variable: $(ConfigurationStorageConnectionString)"'
        displayName: 'Show Variables'

      - task: AzureCLI@2
        displayName: Create temporary SQL firewall rule to allow Azure service connections
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: 'az sql server firewall-rule create -g $(SharedResourceGroup) -s $(SharedSQLServerName) -n "allowAllAzure" --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0'

      - template: ./Infrastructure/steps/deploy-template.yml@devopsTemplates
        parameters:
          serviceConnection: ${{ parameters.serviceConnection }}
          subscriptionId: $(subscriptionId)
          resourceGroupName: $(ResourceGroupName)
          location: "West Europe"
          templateFilePath: "./tl-find-provider-api/azure/findproviderapi-environment.json"
          armParameterOverrideString:
            '-environmentNameAbbreviation "${{parameters.environmentName}}"
            -resourceNamePrefix "${{parameters.BaseName}}"
            -sharedASPName "$(SharedASPName)"
            -sharedEnvResourceGroup "$(SharedResourceGroup)"
            -sharedKeyVaultName "$(SharedKeyVaultName)"
            -sharedSQLServerName "$(SharedSQLServerName)"
            -sqlDatabaseSkuName "$(SQLDatabaseSkuName)"
            -sqlDatabaseTier "$(SQLDatabaseTier)"
            -configurationStorageConnectionString "$(ConfigurationStorageConnectionString)"
            -configStorageAccountName "$(ConfigStorageAccountName)"
            -apiCustomHostName "$(ApiCustomHostName)"
            -apiCertificateName "$(ApiCertificateName)"
            -uiCustomHostName "$(ConnectCustomHostName)"
            -uiCertificateName "$(ConnectCertificateName)"
            -ipSecurityRestrictions $(ipSecurityRestrictions)'
          
            # -bankHolidayGeneratorTrigger "$(BankHolidayGeneratorTrigger)"
            # -employerFeedbackTrigger "$(EmployerFeedbackTrigger)"
            # -providerFeedbackTrigger "$(ProviderFeedbackTrigger)"
            # -providerReferenceTrigger "$(ProviderReferenceTrigger)"'
          tags: $(Tags)
          processOutputs: true

      - task: AzureCLI@2
        displayName: 'Create Api SQL Users and Permissions'
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'ScriptPath'
          ScriptPath: ./operations-devops-tools/Powershell/CreateAppSQLUser/executeCreateAppSQLUser.ps1
          ScriptArguments: '-UserName "$(armOutputs.armOutput.apiAppName)" -ObjectID "$(armOutputs.armOutput.apiManagedServiceIdentityId)" -sqlServerName $(SharedSQLServerName) -sqlDatabaseName "$(armOutputs.armOutput.sqlDatabaseName)" -sqlServerResourceGroup $(SharedResourceGroup) -EntraReaderUserIdentityResourceId $(EntraReaderUserIdentityResourceId) -sqlUserIdentityResourceId $(sqlUserIdentityResourceId)'
          azurePowerShellVersion: 'LatestVersion'
          failOnStandardError: true

      - task: AzureCLI@2
        displayName: Remove temporary SQL firewall rule to allow Azure service connections
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: 'az sql server firewall-rule delete -g $(SharedResourceGroup) -s $(SharedSQLServerName) -n "allowAllAzure"'